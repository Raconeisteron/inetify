#summary Set up Continuous Integration with Jenkins, FindBugs and Emma

= Introduction =

If you have an Android app project along with its test project in Eclipse and you would like to use Jenkins for Continuous Integration and have FindBugs and Emma coverage trends - this is how I got it to work.

= Assumptions =

You have a "standard" Android app and test project in Eclipse. For this document, let's assume the app project is called "linus-app" with API Level 7 (2.1-update1) and the test project "linus-test", and that your Android SDK is installed in "/data/android-sdk".

= Set up Ant =

  * Install Ant if you don't have it already
  * In your Eclipse workspace, run the following command to set up Ant for the app project:
{{{
android update project -p linus-app
}}}
  * Then run this command to set up Ant for the test project. Note that the path given to -m must be the relative path to the project under test, seen from the test project, not the workspace:
{{{
android update test-project -m ../linus-app -p linus-test
}}}
  * Refresh the projects in Eclipse
  * Note: The file "local.properties" contains local configuration, like the location where your Android SDK is installed. Since this location can be different on i.e. Jenkins build machines, this file should *not* be checked in to version control. So I recommend to add "local.properties" to the "Ignored Resources" in Eclipse right away.
  * Test if you can build the app project with
{{{
ant clean compile
}}}
  * Make sure that you have a (virtual) device (only one at a time!) running, and see if you can build the test project and run the tests:
{{{
ant clean coverage
}}}
  * This will take a bit longer. Eventually, you should find a "coverage.html" in the a "coverage" subfolder in your test project, showing the test coverage.
  * You might want to add the "coverage" folder to the version control "Ignored Resources" as well.

= Emma =

If you want to build your projects in Jenkins and use the Emma plugin to see the test coverage and trend, you cannot use the "coverage.html" file as it currently is generated by the "coverage" Ant task and you have to change it to create a "coverage.xml" instead:

  * Go to your Android SDK installation, and open the file "tools/ant/test-rules.xml", copy the complete "coverage" target and paste it in the "build.xml" of the test project, *before* the setup task. There is some more information on how to customize targets in the build file itself.
  * Note: Eclipse might complain about your build file. Since I didn't know how to get rid of these errors and warnings, I just set "Ignore all buildfile problems" in the "Ant Editor settings" in Eclipse's preferences.
  * In the copied "coverage" target in your build.xml, make the following changes:
  * Change
{{{
<html outfile="coverage.html" />
}}} 
  * to 
{{{
<xml outfile="coverage/coverage.xml" />
}}}
  * Adjust the last "echo" message accordingly:
{{{
<echo>Saving the report file in ${basedir}/coverage/coverage.xml</echo>
}}}
  * When you now run "ant clean coverage" again, you should have a coverage.xml file, ready to be used by Jenkins!

= FindBugs =

  * If you don't already have FindBugs installed, download the .zip or .tar.gz from http://findbugs.sourceforge.net/downloads.html and assume that you extract it to "/data/findbugs".
  * Copy "lib/findbugs-ant.jar" from your FindBugs installation to the "lib" folder of your Ant installation.
  * Add the location of your FindBugs installation to the "local.properties" file in you app project:
{{{
findbugs.home=/data/findbugs
}}}
  * If you want to exclude FindBugs warnings for the R.java generated source file, create a file "findbugs-exclude.xml" in your app project folder with the following content:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
	<Match>
		<Class name="~.*\.R\$.*"/>
		<Bug code="Nm"/>
	</Match>
</FindBugsFilter>
}}}
  * Add the following taskdef and target to the "build.xml" of your app project:
{{{
<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

<target name="findbugs" depends="compile">
	<mkdir dir="reports" />
	<findbugs home="${findbugs.home}" output="xml" outputFile="reports/findbugs.xml" excludeFilter="findbugs-exclude.xml">
		<auxClasspath path="${android.jar}" />
		<sourcePath path="${basedir}/src/" />
		<class location="${basedir}/bin/classes/" />
	</findbugs>
</target>
}}}
  * Note, that it may be necessary to adjust "sourcePath path" and "class location".
  * If you don't want to use the "findbugs-exclude.xml" described above, you have to remove the "excludeFilter" attribute.
  * If you now run "ant clean compile" again, you should get a folder "reports" containing a "findbugs.xml" file.
  * You might want to add the "reports" folder to the version control "Ignored Resources" as well.